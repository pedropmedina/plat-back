enum STATUSES {
  PENDING
  ACCEPTED
  DENIED
}

enum REQUEST_TYPE {
  FRIEND
  INVITE
}

interface Request {
  _id: ID!
  to: User!
  status: STATUSES = PENDING
  requestType: REQUEST_TYPE
  author: User!
}

type FriendRequest implements Request {
  _id: ID!
  to: User!
  status: STATUSES
  requestType: REQUEST_TYPE
  author: User!
}

type InviteRequest implements Request {
  _id: ID!
  to: User!
  status: STATUSES
  requestType: REQUEST_TYPE
  author: User!
  plan: Plan!
}

# type Invite {
#   _id: ID!
#   plan: Plan!
#   to: User!
#   status: STATUSES
#   author: User!
# }

input CreateRequest {
  to: ID!
  status: STATUSES!
  requestType: REQUEST_TYPE!
  plan: ID
}

input UpdateRequestInput {
  requestId: ID!
  status: STATUSES
}

extend type Query {
  getRequests: [Request]!
  getRequest(requestId: ID!): Request!
}

extend type Mutation {
  createRequest(input: CreateRequest!): Request!
  updateRequest(input: UpdateRequestInput!): Request!
  deleteRequest(requestId: ID!): Boolean!
}
