enum STATUSES {
  PENDING
  ACCEPTED
  DENIED
}

enum REQUEST_TYPE {
  FRIEND
  INVITE
}

interface Request {
  _id: ID!
  to: User!
  status: STATUSES!
  reqType: REQUEST_TYPE!
  author: User!
  createdAt: String!
  updatedAt: String!
}

type FriendRequest implements Request {
  _id: ID!
  to: User!
  status: STATUSES!
  reqType: REQUEST_TYPE!
  author: User!
  createdAt: String!
  updatedAt: String!
}

type InviteRequest implements Request {
  _id: ID!
  to: User!
  status: STATUSES!
  reqType: REQUEST_TYPE!
  author: User!
  plan: Plan!
  createdAt: String!
  updatedAt: String!
}

input CreateRequestInput {
  to: String!
  status: STATUSES = PENDING
  reqType: REQUEST_TYPE!
  plan: ID
}

input UpdateRequestInput {
  reqId: ID!
  status: STATUSES!
}

extend type Query {
  getRequests(reqType: REQUEST_TYPE): [Request]!
  getRequest(reqId: ID!): Request!
}

extend type Mutation {
  createRequest(input: CreateRequestInput!): Request!
  updateRequest(input: UpdateRequestInput!): Request!
  deleteRequest(reqId: ID!): Request!
}

extend type Subscription {
  requestCreated: Request!
  requestUpdated: Request!
  requestDeleted: Request!
}
