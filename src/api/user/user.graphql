type User {
  email: String!
  username: String!
  name: String
  image: String
  address: Address
  friends: [User]!
  plans: [Plan]!
  pins: [Pin]!
  likedPins: [Pin]!
  sentRequests: [Request]!
  receivedRequests: [Request]!
  admin: Boolean!
}

type Address {
  street1: String
  street2: String
  city: String
  state: String
  zip: String
}

type Auth {
  token: String!
  user: User!
}

input LoginUserInput {
  username: String!
  password: String!
}

input SignupUserInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  userId: String!
  name: String
  username: String
  password: String
  image: String
}

extend type Query {
  me: User!
  getUsers: [User]!
  getUser(userId: ID!): User!
}

extend type Mutation {
  signupUser(input: SignupUserInput!): Auth!
  loginUser(input: LoginUserInput!): Auth!
  logoutUser(token: String!): Boolean!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(userId: ID!): User!
  likePin(pinId: ID!): Boolean!
}
