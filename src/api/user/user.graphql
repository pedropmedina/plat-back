type User {
  email: String!
  username: String!
  firstName: String
  lastName: String
  about: String
  phone: String
  image: String
  address: Address
  friends: [User]!
  myPlans: [Plan]!
  inPlans: [Plan]!
  myPins: [Pin]!
  likedPins: [Pin]!
  sentRequests: [Request]!
  admin: Boolean!
  tokenVersion: Int!
}

type Address {
  longitude: Float
  latitude: Float
}

type Auth {
  token: String!
  user: User!
}

input LoginUserInput {
  username: String!
  password: String!
}

input SignupUserInput {
  email: String!
  password: String!
}

input AddressInput {
  longitude: Float!
  latitude: Float!
}

input UpdateUserInput {
  firstName: String
  lastName: String
  email: String
  about: String
  phone: String
  image: String
  address: AddressInput
}

input UpdateUserPrivacy {
  username: String
  currentPassword: String
  newPassword: String
}

extend type Query {
  me: User!
  getUsers: [User]!
  getUser(userId: ID, username: String): User!
}

extend type Mutation {
  signupUser(input: SignupUserInput!): Auth!
  loginUser(input: LoginUserInput!): Auth!
  logoutUser: Boolean!
  updateUser(input: UpdateUserInput!): User!
  deleteUser(userId: ID!): User!
}
